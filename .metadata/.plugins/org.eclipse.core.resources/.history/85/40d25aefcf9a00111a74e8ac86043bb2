
import java.awt.*;

import javax.swing.*;

import java.util.*;
import java.awt.event.*;
import java.util.ArrayList;


// This version is for the class - separate out the controller
//  sets up the GUI and other classes

 @SuppressWarnings({ "serial", "unused" })
public class mazegui extends JFrame
 {
   
		ActionListener action;
		JButton help;
		JButton start,turnright,turnleft,turnaround,enter;
		public Maze maze;
		public boolean first;
		javax.swing.Timer t;
		public int frame=0;
		public JPanel toppanel;

 
 private JTextArea outputArea;
 
 //DECLARE OBJECTS (DO NOT INSTANTIATE HERE) OF THE DRAWROOMS AND CONTROLPANEL CLASSES E.G
 // 
 DrawRooms drawroom;
 int current=0;
 int[][] grid;
 String[] rturns = {"middle","midright","turn","midleft"};
 String[] lturns = {"middle","midleft","turn","midright"};

 
 // I AM GIVING CODE FOR THE JTEXTAREA TO SHOW YOU HOW TO PUT IT IN A SCROLLPANE
//************************************************************************************************
// 
//************************************************************************************************
public mazegui() 
 { 
 Container c = getContentPane();
  //   instantiate the JTextArea declared above  to output client names - e.g
 outputArea = new JTextArea(3,60);
 outputArea.setEditable(false);
 outputArea.setFont(new Font("Cracked",Font.BOLD,15));
 outputArea.setBackground(Color.cyan);// where outputArea is the JTextArea

 JScrollPane listScrollPane = new JScrollPane(outputArea);
 outputArea.append( "                  Welcome to the MAZE OF DOOM.");

  //INSTANTIATE HERE IN THIS ORDER
   
  // DRAWROOMS  - SEND THE ROOMS ARRAY AS A PARAMETER TO THE DRAWROOMS CONSTRUCTOR
 maze = new Maze();
     drawroom = new DrawRooms(maze);
     grid = maze.getgrid();
	 
	   
	// INSTANTIATE AN OBJECT OF CONTROLPANEL CLASS (CALL IT CONTROLS) - SEND IT THE OUTPUTAREA, DRAWROOM AND THE ARRAY OF INTS
	  
    // PUT A BORDER AROUND IT
   

	// set up the  WELCOME Panel TO HOLD THE LABEL
	// CREATE A BACKGROUND COLOR FOR IT AND SET ITS BORDER
	
	 
	// YOU WILL NEED SEVERAL PANELS, ONE FOR THE TOP OF THE SCREEN  - CALL IT TOPPANEL
		 toppanel = new JPanel();
		 action = new ActionListener()
				 {
				
				public void actionPerformed(ActionEvent e) {

					if (e.getActionCommand().equals("HELP!!")) // help button pressed
			        {

			        	  JOptionPane.showMessageDialog (null,  "Press the direction button you want \n",   
			        			  "INSTRUCTIONS", JOptionPane.PLAIN_MESSAGE );			        
			        }
					if (e.getActionCommand().equals("TURN RIGHT")) // start button pressed
			        {
						rightturn();
			        }
					if (e.getActionCommand().equals("TURN LEFT")) // help button pressed
			        {
					leftturn();	
			        }
					if (e.getActionCommand().equals("TURN AROUND")) // help button pressed
			        {
						leftturn2();
			        }
					if (e.getActionCommand().equals("ENTER")) // help button pressed
			        {
						enter();
			        }
								
				}
				
			};
		help = new JButton("HELP!!");
		help.addActionListener(action);
		start = new JButton("START");
		start.addActionListener(action);
		turnright = new JButton("TURN RIGHT");
		turnright.addActionListener(action);
		turnleft = new JButton("TURN LEFT");
		turnleft.addActionListener(action);
		turnaround = new JButton("TURN AROUND");
		turnaround.addActionListener(action);
		enter = new JButton("ENTER");
		enter.addActionListener(action);


		 toppanel.add(help);
		 toppanel.add(enter);
		 toppanel.add(turnleft);
		 toppanel.add(turnright);
		 toppanel.add(turnaround);

		 toppanel.add(outputArea);


		 c.add(toppanel,BorderLayout.NORTH);

		 // where c is the contentPane
JPanel gridpane = new JPanel();	
gridpane.add(drawroom);
JScrollPane gridScrollPane = new JScrollPane(gridpane);

c.add(gridScrollPane,BorderLayout.CENTER);

	// THE BUTTONS WILL CREATED AND ADDED TO A PANEL IN CONTROLPANEL CLASS SO ALL YOU HAVE TO DO IS ADD
	// THE OBJECT OF THE CONTROLPANEL CLASS - controls - to the TOPPANEL
	
	// CREATE THE TOPPANEL OBJECT TO HOLD THE OBJECT OF THE CONTROLPANEL CLASS(WHICH HOLDS THE BUTTONS) AND THE JTEXTAREA
	
	// ADD THE CONTROLS PANEL OBJECT AND THE SCROLLPANE FOR THE JTEXTAREA  - YOU CAN USE A BORDERLAYOUT OR TRY A BOX LAYOUT

   // GET THE CONTENTPANE AND ADD THE TOPPANEL(NORTH) AND WELCOME PANEL(SOUTH)
	
	// DRAWROOMS WILL BE IN THE CENTER BUT WE HAVE NOT DONE THAT YET.  
	   c.setPreferredSize(new Dimension(850,700));
	   

 }

public void mazebegin()
{
	maze.begin();
} 
public void turn(String turn)
{
	if (turn.equalsIgnoreCase("left"))
		leftturn();
	if (turn.equalsIgnoreCase("right"))
		rightturn();
	if (turn.equalsIgnoreCase("left2"))
	{
		leftturn();
		leftturn();
	}

	
	
	
}
void rightturn()
{	
	ActionListener action = new ActionListener()
	{

		public void actionPerformed(ActionEvent e) {
			if (frame==121){
				
				frame=0;
				drawroom.setNum(0);
				t.stop();
		    	drawroom.setturn("middle");
				drawroom.reset();
				drawroom.repaint();
				maze.setFacing(maze.getTurn("right"));

			}
			else
			{
	    	drawroom.setNum(frame++);
	    	drawroom.setturn("arightturn");
			drawroom.repaint();
			}
		}
		
	};
t = new javax.swing.Timer(1000/120,action);
				t.start();

    
}

void leftturn()
{
	ActionListener action = new ActionListener()
	{

		public void actionPerformed(ActionEvent e) {

			if (frame==121){
				
				frame=0;
				drawroom.setNum(0);
				t.stop();
		    	drawroom.setturn("middle");
				drawroom.reset();
				drawroom.repaint();
				maze.setFacing(maze.getTurn("left"));
			}
			else
			{
	    	drawroom.setNum(frame++);
	    	drawroom.setturn("aleftturn");
			drawroom.repaint();
			}
		}
		
	};
			t = new javax.swing.Timer(1000/120,action);
				t.start();
}

		void leftturn2()
		{
			ActionListener action = new ActionListener()
			{
				public void actionPerformed(ActionEvent e) {

					if (frame==121 && first){
						
						frame=0;
						first = false;
						drawroom.setNum(0);
//								t.stop();
//				    	drawroom.setturn("middle");
						drawroom.reset();
						drawroom.repaint();
						
					}
					else if (frame==121 && !first){
						
						frame=0;
						drawroom.setNum(0);
						t.stop();
				    	drawroom.setturn("middle");
						drawroom.reset();
						drawroom.repaint();
						maze.setFacing(maze.getTurn("left2"));

					}
					else
					{
			    	drawroom.setNum(frame++);
			    	drawroom.setturn("aleftturn");
					drawroom.repaint();
					}
				}
				
			};

				 first = true;
					t = new javax.swing.Timer(1000/120, action);
					t.start();
							

}

public void enter()
{
	ActionListener action = new ActionListener()
	{

		public void actionPerformed(ActionEvent e) {

			if (frame==41)
			{
				frame=0;
				drawroom.setNum(0);
				t.stop();
				drawroom.setturn("middle");
				drawroom.reset();
				drawroom.repaint();

				int next[] = maze.getgridturn();
				int current[] = maze.getCurrent();
				maze.setCurrent(current[0]+next[0], current[1]+next[1]);



				
			}
			else
			{
	    	drawroom.setNum(frame++);
	    	drawroom.setturn("enter");
			drawroom.repaint();

			}
		}


		
	};
			int current[] = maze.getCurrent();
			int next[] = maze.getgridturn();

			int[] new1  = {current[0]+next[0],current[1]+next[1]};
			if(new1[0] < 0 || new1[0] > 3 || new1[1] < 0 || new1[1] > 3){}
			else if(grid[new1[0]][new1[1]]!=0 )
			{
			t = new javax.swing.Timer(1000/40,action);
			t.start();
			}


}

 }
 
	

